{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\1653020_10\\\\Source\\\\src\\\\components\\\\ChartVN.js\";\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport Axios from 'axios';\nconst data = [{\n  name: 'Page A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'Page B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'Page C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'Page D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'Page E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'Page F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'Page G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\nconst [items] = [{\n  name: String(),\n  uv: Number(),\n  pv: Number(),\n  amt: Number()\n}];\n\nfunction ChartVN() {\n  const [Patients, setPatients] = useState({});\n  useEffect(() => {\n    Axios.get(\"https://td.fpt.ai/corona/corona-chart-vn.json\").then(result => {\n      setPatients(result.data);\n      console.log(\"đã get\");\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {// setIsLoaded(true);\n      // setError(error);\n    }).them(() => {\n      const arrayOfObj = [].concat(Object.values(Patients));\n      const arrayKeys = [].concat(Object.keys(Patients));\n\n      if (items[0].name === \"\") {\n        for (let i = 0; i < arrayKeys.length; i++) {\n          items[i] = {\n            name: arrayKeys[i],\n            uv: [].concat(arrayOfObj[i])[0],\n            pv: [].concat(arrayOfObj[i])[1],\n            amt: [].concat(arrayOfObj[i])[2]\n          };\n        }\n      }\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(LineChart, {\n    width: 600,\n    height: 500,\n    data: items,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 5,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 12\n    }\n  }, console.log(data), console.log(items), /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"pv\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"uv\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default ChartVN;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/1653020_10/Source/src/components/ChartVN.js"],"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Axios","data","name","uv","pv","amt","items","String","Number","ChartVN","Patients","setPatients","get","then","result","console","log","error","them","arrayOfObj","concat","Object","values","arrayKeys","keys","i","length","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React, {useEffect, useState }  from 'react';\r\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\r\nimport Axios from 'axios';\r\n\r\nconst data = [\r\n    {\r\n        name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\r\n    },\r\n    {\r\n        name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\r\n    },\r\n    {\r\n        name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\r\n    },\r\n    {\r\n        name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\r\n    },\r\n    {\r\n        name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\r\n    },\r\n    {\r\n        name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\r\n    },\r\n    {\r\n        name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\r\n    },\r\n];\r\nconst [items] =[{\r\n    name: String(),\r\n    uv: Number(),\r\n    pv: Number(),\r\n    amt: Number()\r\n}]\r\n\r\nfunction ChartVN () {\r\n    const [Patients, setPatients] = useState({});\r\n    \r\n\r\n    useEffect(() => {\r\n        Axios.get(\"https://td.fpt.ai/corona/corona-chart-vn.json\")\r\n            .then(\r\n                (result) => {\r\n                    setPatients(result.data);\r\n                    console.log(\"đã get\")\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    // setIsLoaded(true);\r\n                    // setError(error);\r\n                }\r\n            )\r\n            .them (() => {\r\n                const arrayOfObj = [].concat( Object.values(Patients));\r\n                const arrayKeys = [].concat( Object.keys(Patients));\r\n                \r\n                if(items[0].name === \"\"){\r\n                for (let i=0; i<arrayKeys.length; i++){\r\n                    items[i] = {\r\n                        name : arrayKeys[i],\r\n                        uv : [].concat(arrayOfObj[i])[0],\r\n                        pv : [].concat(arrayOfObj[i])[1],\r\n                        amt : [].concat(arrayOfObj[i])[2]\r\n                    }\r\n                }}\r\n            })\r\n    }, [])\r\n\r\n    return <LineChart\r\n            width={600}\r\n            height={500}\r\n            data={items}\r\n            margin={{\r\n                top: 5, right: 30, left: 5, bottom: 5,\r\n            }}\r\n        >\r\n            {console.log(data)}\r\n            {console.log(items)}\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis dataKey=\"name\" />\r\n            <YAxis />\r\n            <Tooltip />\r\n            <Legend />\r\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\r\n        </LineChart>\r\n    }\r\n\r\n\r\nexport default ChartVN;\r\n"]},"metadata":{},"sourceType":"module"}